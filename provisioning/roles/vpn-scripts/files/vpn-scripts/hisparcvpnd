#!/usr/bin/python
""" Simple XML-RPC Server to run on the VPN server

    This daemon should be run on HiSPARC's VPN server.  It will handle the
    creation of hosts and keys and the retrieval of HiSPARC certificates.

    The basis for this code was ripped from the python SimpleXMLRPCServer
    library documentation and extended.

"""
import base64
import io as StringIO
import os
import subprocess
import zipfile

from xmlrpc.server import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer

OPENVPN_DIR = '/etc/openvpn'
HOSTS_FILE = '/etc/hosts-hisparc'


def create_key(host, type, ip):
    """create keys for a host and set up openvpn"""

    if type == 'client':
        subprocess.check_call(['/usr/local/bin/create_keys.sh', OPENVPN_DIR, host])
        with open(os.path.join(OPENVPN_DIR, 'ccd', host), 'w') as file:
            file.write(f'ifconfig-push {ip} 255.255.254.0\n')
    elif type == 'admin':
        subprocess.check_call(['/usr/local/bin/create_admin_keys.sh', OPENVPN_DIR, host])
    else:
        raise ValueError(f'Unsupported type; {type}')

    return True


def register_hosts_ip(host_list):
    """Register all hosts ips"""

    with open(HOSTS_FILE, 'w') as file:
        for host, ip in host_list:
            file.write(f'{ip}\t{host}.his\n')
    subprocess.check_call(['/usr/bin/systemctl', 'restart', 'dnsmasq.service'])

    return True


def get_key(host, type):
    """Get a zip-archive containing all relevant keys"""

    memfile = StringIO.StringIO()
    zip_file = zipfile.ZipFile(memfile, 'w')

    if type == 'client':
        key_dir = os.path.join(OPENVPN_DIR, 'keys')
        zip_file.write(f'{key_dir}/{host}.crt', 'hisparc.crt')
        zip_file.write(f'{key_dir}/{host}.key', 'hisparc.key')
        zip_file.write(f'{key_dir}/ca.crt', 'ca.crt')
    elif type == 'admin':
        key_dir = os.path.join(OPENVPN_DIR, 'adminkeys')
        zip_file.write(f'{key_dir}/{host}.crt', 'hisparc_admin.crt')
        zip_file.write(f'{key_dir}/{host}.key', 'hisparc_admin.key')
        zip_file.write(f'{key_dir}/ca.crt', 'ca_admin.crt')
    else:
        raise ValueError(f'Unsupported type; {type}')

    key_dir = os.path.join(OPENVPN_DIR, 'keys')
    zip_file.write(f'{key_dir}/ta.key', 'ta.key')
    zip_file.close()

    zip_file = memfile.getvalue()
    memfile.close()

    return base64.b64encode(zip_file)


if __name__ == '__main__':
    # Restrict to a particular path.
    class RequestHandler(SimpleXMLRPCRequestHandler):
        rpc_paths = ('/RPC2',)

    # Create server
    server = SimpleXMLRPCServer(("0.0.0.0", 8001),
                                requestHandler=RequestHandler)
    server.register_introspection_functions()

    server.register_function(create_key)
    server.register_function(register_hosts_ip)
    server.register_function(get_key)

    # Run the server's main loop
    server.serve_forever()
