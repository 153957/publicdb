- name: Use custom .bashrc
  ansible.builtin.template:
    src: bashrc
    dest: ~/.bashrc-datastore
    backup: true

- name: Ensure datastore data directory and subdirectories exist
  ansible.builtin.file:
    path: "{{ datastore_data_path }}/{{ item }}"
    state: directory
    mode: 02775
  with_items:
    - /
    - tmp
    - incoming
    - partial
    - suspicious

- name: Ensure station list exists
  ansible.builtin.file:
    path: "{{ datastore_config }}"
    state: touch

- name: Ensure log directory exists
  ansible.builtin.file:
    path: "{{ datastore_logs }}"
    state: directory
    mode: 0775

- name: "Checkout datastore in {{ datastore_code }}"
  ansible.builtin.git:
    repo: "{{ datastore_repo }}"
    dest: "{{ datastore_code }}"
    update: true
    force: false
    version: master
  notify: Restart uWSGI

- name: Remove compiled python code
  ansible.builtin.command:
    cmd: "find {{ datastore_code }} -name *.pyc -delete"
  changed_when: False

- name: Copy conda requirements files
  ansible.builtin.copy:
    src: requirements-conda.txt
    dest: "{{ datastore_path }}requirements-conda.txt"

- name: Create conda environment
  ansible.builtin.shell:
    cmd: "{{ miniconda_path }}/bin/conda create -n datastore_venv python={{ datastore_python_version }} --yes"
    creates: "{{ datastore_venv }}"

- name: Install conda packages in conda environment
  ansible.builtin.command:
    cmd: "{{ miniconda_path }}/bin/conda install -n datastore_venv --channel conda-forge --file {{ datastore_path }}requirements-conda.txt --yes"
  register: conda_result
  changed_when: "'Executing transaction' in conda_result.stdout"

- name: Copy datastore.py
  ansible.builtin.template:
    src: datastore.py
    dest: "{{ datastore_path }}"
    backup: yes
  notify: Restart uWSGI

- name: Copy config.ini
  ansible.builtin.template:
    src: config.ini
    dest: "{{ datastore_path }}"
    backup: yes
  notify: Restart uWSGI

- name: Copy writer_app.py
  ansible.builtin.template:
    src: writer_app.py
    dest: "{{ datastore_path }}"
    backup: yes

- name: Copy datastore config server
  ansible.builtin.template:
    src: datastore-config-server.py
    dest: "{{ datastore_path }}"
  notify: Restart datastore config server

- name: Ensure supervisord directory exists
  ansible.builtin.file:
    path: "{{ supervisord_path }}"
    state: directory
    mode: 02775

- name: Copy supervisord configuration
  ansible.builtin.template:
    src: supervisord.conf
    dest: "{{ supervisord_path }}/supervisord.conf"
  notify: Restart supervisord

- name: Copy uwsgi.ini
  ansible.builtin.template:
    src: uwsgi.ini
    dest: "{{ supervisord_path }}/uwsgi.ini"
    backup: yes
  notify: Restart uWSGI

- name: Enable cron job for starting supervisord at boot time
  ansible.builtin.cron:
    name: Start supervisord at boot time
    special_time: reboot
    state: present
    job: "{{ datastore_venv }}/bin/supervisord -c {{ supervisord_path }}/supervisord.conf"

- name: Check if supervisord is running
  ansible.builtin.command:
    cmd: pgrep supervisord
  register: supervisord
  failed_when: False
  changed_when: supervisord.rc == 1

- name: Start supervisord
  ansible.builtin.command:
    cmd: "{{ datastore_venv }}/bin/supervisord -c {{ supervisord_path }}/supervisord.conf"
  when: supervisord is changed

- name: Add cron job to stop writer before histogram update
  ansible.builtin.cron:
    name: "Stop writer before update"
    minute: 0
    hour: 0
    state: present
    job: "{{ datastore_venv }}/bin/supervisorctl -c {{ supervisord_path }}/supervisord.conf stop datastore-writer"

- name: Add cron job to start writer after histogram update
  ansible.builtin.cron:
    name: "Start writer after update"
    minute: 0
    hour: 3
    state: present
    job: "{{ datastore_venv }}/bin/supervisorctl -c {{ supervisord_path }}/supervisord.conf start datastore-writer"

- name: Copy Apache httpd config file
  ansible.builtin.template:
    src: hisparc-httpd.conf
    dest: /tmp/hisparc-httpd.conf
  register: httpdconf

- name: Sudoedit Apache httpd config file
  ansible.builtin.shell:
    cmd: "sudo sudoedit /etc/httpd/conf.d/hisparc-httpd.conf"
    stdin: ":1,$d|:r /tmp/hisparc-httpd.conf|:wq"
  environment:
    SUDO_EDITOR: /usr/bin/vi
  when: httpdconf.changed
  notify: Restart webserver
