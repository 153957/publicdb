- name: Use custom .bashrc
  ansible.builtin.template:
    src: bashrc
    dest: ~/.bashrc
    backup: true

- name: Ensure /srv directory exists
  ansible.builtin.file:
    path: "{{ datastore_base }}"
    state: directory
  become: true

- name: Ensure /srv/datastore directory exists
  ansible.builtin.file:
    path: "{{ datastore_path }}"
    state: directory
    owner: hisparc
    group: hisparc
    mode: 02775
  become: true

- name: Set default group write ACLs on /srv/datastore
  ansible.posix.acl:
    default: true
    etype: group
    permissions: rwx
    path: "{{ datastore_path }}"
    state: present
  become: true

- name: Ensure /var/log/hisparc directory exists
  ansible.builtin.file:
    path: /var/log/hisparc
    state: directory
    group: hisparc
    mode: 0775
  become: true

- name: Checkout datastore in /srv/datastore/code
  ansible.builtin.git:
    repo: "{{ datastore_repo }}"
    dest: "{{ datastore_code }}"
    update: true
    force: false
    version: master
  notify: Restart uWSGI

- name: Remove compiled python code
  ansible.builtin.command:
    cmd: "find {{ datastore_code }} -name *.pyc -delete"

- name: Copy conda requirements files
  ansible.builtin.copy:
    src: conda.list
    dest: ~/conda.list

- name: Copy pip requirements files
  ansible.builtin.copy:
    src: pip.list
    dest: ~/pip.list

- name: Create conda environment
  ansible.builtin.shell:
    cmd: "/opt/miniconda/bin/conda create --prefix {{ datastore_venv }} python={{ datastore_python_version }} --yes"
    creates: "{{ datastore_venv }}"

- name: Install conda packages in conda environment
  ansible.builtin.command:
    cmd: "/opt/miniconda/bin/conda install --prefix {{ datastore_venv }} --file ~/conda.list --yes"

- name: Install packages in conda environment using pip
  ansible.builtin.pip:
    requirements: ~/pip.list
    virtualenv: "{{ datastore_venv }}"

- name: Copy datastore.py
  ansible.builtin.template:
    src: datastore.py
    dest: "{{ datastore_path }}"
    backup: yes
  notify: Restart uWSGI

- name: Copy writer_app.py
  ansible.builtin.template:
    src: writer_app.py
    dest: "{{ datastore_path }}"
    backup: yes

- name: Copy datastore config server
  ansible.builtin.template:
    src: datastore-config-server.py
    dest: "{{ datastore_path }}"
  notify: Restart datastore config server

- name: Copy config.ini
  ansible.builtin.copy:
    src: config.ini
    dest: "{{ datastore_path }}"
    backup: yes
  notify: Restart uWSGI

- name: Copy uwsgi.ini
  ansible.builtin.template:
    src: uwsgi.ini
    dest: "{{ datastore_path }}"
    backup: yes
  notify: Restart uWSGI

- name: Install supervisor daemon
  ansible.builtin.pip:
    name: supervisor
  become: true

- name: Copy supervisord init script
  ansible.builtin.copy:
    src: supervisord
    dest: /etc/init.d/supervisord
    backup: yes
    owner: root
    group: root
    mode: 0755
  become: true

- name: Copy supervisord.conf
  ansible.builtin.template:
    src: supervisord.conf
    dest: /etc/supervisord.conf
    backup: yes
    owner: root
    group: root
    mode: 0644
  become: true
  notify: Restart supervisord

- name: Start supervisord now and on boot
  ansible.builtin.service:
    name: supervisord
    state: started
    enabled: yes
  become: true
