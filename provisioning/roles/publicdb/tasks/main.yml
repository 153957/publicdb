---

- name: use custom .bashrc
  template:
    src: bashrc
    dest: ~/.bashrc
    backup: yes

- name: ensure /srv directory exists
  file:
    path: "{{ publicdb_base }}"
    state: directory
  become: true

- name: ensure /srv/publicdb directory exists
  file:
    path: "{{ publicdb_path }}"
    state: directory
    owner: hisparc
    group: hisparc
    mode: 02775
  become: true

- name: ensure /var/log/hisparc-*.log exists
  file:
    path: "/var/log/{{ item }}"
    state: touch
    owner: hisparc
    group: hisparc
    mode: 0644
  with_items:
    - hisparc-update.log
    - hisparc-django-errors.log
  become: true

- name: set default group write ACLs on /srv/publicdb
  acl:
    default: yes
    etype: group
    permissions: rwx
    path: "{{ publicdb_path }}"
    state: present
  become: true

- name: get local git HEAD (for dev VM)
  local_action: command git rev-parse --verify HEAD
  register: local_head
  when: inventory_hostname == "publicdb"

- name: checkout publicdb in /srv/publicdb/www
  git:
    repo: "{{ publicdb_repo }}"
    dest: "{{ publicdb_code }}"
    update: yes
    force: no
    version: "{{ local_head.stdout | default('master') }}"
  notify: restart uWSGI

- name: remove compiled python code
  command: "find {{ publicdb_code }} -name *.pyc -delete"

- name: checkout jsparc in /srv/publicdb/jsparc
  git:
    repo: "{{ jsparc_repo }}"
    dest: "{{ jsparc_path }}"
    update: yes
    force: no
    version: master

- name: create django static folder
  file:
    path: "{{ publicdb_static }}"
    state: directory

- name: create django media/raw_data folder
  file:
    path: "{{ publicdb_media }}raw_data"
    state: directory

- name: Copy conda requirements files
  copy:
    src: conda.list
    dest: ~/conda.list

- name: Copy pip requirements files
  copy:
    src: pip.list
    dest: ~/pip.list

- name: create conda environment
  shell: "/opt/miniconda/bin/conda create --prefix {{ publicdb_venv }} python={{ publicdb_python_version }} --yes"
  args:
    creates: "{{ publicdb_venv }}"

- name: install conda packages in conda environment
  command: "/opt/miniconda/bin/conda install --prefix {{ publicdb_venv }} --file ~/conda.list --yes"

# uwsgi fails to build from pip due to SSL version swamp
- name: install uwsgi from conda-forge
  command: "/opt/miniconda/bin/conda install --prefix {{ publicdb_venv }} --channel conda-forge uwsgi --yes"

- name: install packages in conda environment using pip
  pip:
    requirements: ~/pip.list
    virtualenv: "{{ publicdb_venv }}"

- name: setup the publicdb database in PostgreSQL
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ psql_database_name }}"
    encoding: UTF-8
    state: present

- name: add hisparc user to the publicdb database
  become: true
  become_user: postgres
  postgresql_user:
    db: "{{ psql_database_name }}"
    name: hisparc
    priv: ALL

- name: ensure hisparc user has no unnecessary privileges
  become: true
  become_user: postgres
  postgresql_user:
    name: hisparc
    role_attr_flags: NOSUPERUSER,NOCREATEDB

- name: copy Django settings file
  template:
    src: settings.py
    dest: "{{ publicdb_code }}publicdb/settings.py"
    backup: yes
  notify: restart uWSGI

- name: migrate Django apps
  django_manage:
    command: migrate
    app_path: "{{ publicdb_code }}"
    virtualenv: "{{ publicdb_venv }}"

- name: collect static files of Django apps
  django_manage:
    command: collectstatic
    app_path: "{{ publicdb_code }}"
    virtualenv: "{{ publicdb_venv }}"

- name: copy uwsgi.ini
  template:
    src: uwsgi.ini
    dest: "{{ publicdb_code }}uwsgi.ini"
    backup: yes
  notify: restart uWSGI

- name: install nginx
  yum:
    name: nginx
    state: present
  become: true

- name: copy nginx HTTP configuration
  template:
    src: nginx-http.conf
    dest: /etc/nginx/conf.d/
  notify: restart nginx
  become: true

- name: start nginx on boot
  service:
    name: nginx
    state: started
    enabled: yes
  become: true

# do not overwrite let's encrypt https config on pique
- name: copy nginx HTTPS configuration
  template:
    src: nginx-https.conf
    dest: /etc/nginx/conf.d/
  notify: restart nginx
  become: true
  when: is_dev is defined

#
# SELinux stuff
#
- name: ensure /var/lib/selinux exists
  file:
    path: /var/lib/selinux
    state: directory
    mode: 0755
  become: true

- name: copy SELinux type enforcement module
  copy:
    src: nginx-publicdb.te
    dest: /var/lib/selinux/
  become: true

- name: check if custom SELinux module (nginx-publicdb) is installed
  shell: "semodule --list-modules | grep nginx-publicdb | cat"
  register: module_nginx_installed
  become: true

- name: build and install custom SELinux module
  command: "{{ item }}"
  args:
    chdir: /var/lib/selinux
  with_items:
    - "checkmodule -M -m -o nginx-publicdb.mod nginx-publicdb.te"
    - "semodule_package -o nginx-publicdb.pp -m nginx-publicdb.mod"
    - "semodule -i nginx-publicdb.pp"
  when: not module_nginx_installed.stdout
  become: true
#
# End of SELinux stuff
#

- name: install supervisor daemon
  pip:
    name: supervisor
  become: true

- name: copy supervisord init script
  copy:
    src: supervisord
    dest: /etc/init.d/supervisord
    backup: yes
    owner: root
    group: root
    mode: 0755
  become: true

- name: copy supervisord.conf
  template:
    src: supervisord.conf
    dest: /etc/supervisord.conf
    backup: yes
    owner: root
    group: root
    mode: 0644
  become: true

- name: start supervisord now and on boot
  service:
    name: supervisord
    state: started
    enabled: yes
  become: true

- name: enable cron job for updating histograms and ESD
  cron:
    name: "HiSPARC update"
    cron_file: hisparc
    minute: 0
    hour: 4
    state: present
    user: hisparc
    job: "{{ publicdb_venv }}/bin/python {{ publicdb_code }}manage.py updatehistograms"
  become: true

- name: enable cron job for cleaning out downloaded raw_data files
  cron:
    name: "clean downloaded data"
    cron_file: hisparc
    special_time: daily
    state: present
    user: root
    job: "find {{ publicdb_media }}raw_data/ -name 'tmp*.h5' -mtime +1 -delete"
  become: true

- name: enable cron job for creating analysis sessions
  cron:
    name: "create confirmed sessions"
    cron_file: hisparc
    minute: "*/2"
    state: present
    user: hisparc
    job: "{{ publicdb_venv }}/bin/python {{ publicdb_code }}manage.py createsessions"
  become: true

- name: enable cron job for daily backup of publicdb database
  cron:
    name: "Publicdb dump"
    cron_file: hisparc
    minute: 0
    hour: 1
    state: present
    user: hisparc
    job: "if [ -f '/mysqldumps/publicdb_dump.sql' ]; then mv /mysqldumps/publicdb_dump.sql /mysqldumps/publicdb_dump_yesterday.sql; fi; pg_dump --format=c --compress=1 --schema=public --dbname=publicdb --file=/mysqldumps/publicdb_dump.sql"
  become: true

- name: enable cron job for monthly backup of publicdb database
  cron:
    name: "Monthly publicdb dump"
    cron_file: hisparc
    minute: 0
    hour: 20
    day: 1
    state: present
    user: hisparc
    job: "if [ -f '/mysqldumps/publicdb_dump_this_month.sql' ]; then mv /mysqldumps/publicdb_dump_this_month.sql /mysqldumps/publicdb_dump_prev_month.sql; fi; pg_dump --format=c --compress=1 --schema=public --dbname=publicdb --file=/mysqldumps/publicdb_dump_this_month.sql"
  become: true
