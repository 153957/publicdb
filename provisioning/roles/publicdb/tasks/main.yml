- name: Use custom .bashrc
  ansible.builtin.template:
    src: bashrc
    dest: ~/.bashrc-publicdb
    backup: yes

- name: Ensure publicdb directory exists
  ansible.builtin.file:
    path: "{{ publicdb_path }}"
    state: directory
    mode: 02775

- name: Ensure publicdb log directory exists
  ansible.builtin.file:
    path: "{{ publicdb_logs }}"
    state: directory
    mode: 02775

- name: Ensure hisparc-*.log exists
  ansible.builtin.file:
    path: "{{ publicdb_logs }}/{{ item }}"
    state: touch
    mode: 0644
  with_items:
    - hisparc-update.log
    - hisparc-django-errors.log

- name: "Checkout publicdb in {{ publicdb_code }}"
  ansible.builtin.git:
    repo: "{{ publicdb_repo }}"
    dest: "{{ publicdb_code }}"
    update: yes
    force: no
    version: master
  register: git_result
  changed_when: "git_result.after|default('after') != git_result.before|default('before')"
  notify: Restart webserver

- name: Remove compiled python code
  ansible.builtin.command:
    cmd: "find {{ publicdb_code }} -name *.pyc -delete"
  changed_when: False

- name: "Checkout jsparc in {{ jsparc_path }}"
  ansible.builtin.git:
    repo: "{{ jsparc_repo }}"
    dest: "{{ jsparc_path }}"
    update: yes
    force: no
    version: master

- name: Create django static folder
  ansible.builtin.file:
    path: "{{ publicdb_static }}"
    state: directory

- name: Create django media/raw_data folder
  ansible.builtin.file:
    path: "{{ publicdb_media }}/raw_data"
    state: directory

- name: Copy conda requirements files
  ansible.builtin.copy:
    src: conda.list
    dest: "{{ publicdb_path }}/conda.list"

- name: Copy pip requirements files
  ansible.builtin.copy:
    src: pip.list
    dest: "{{ publicdb_path }}/pip.list"

- name: Create conda environment
  ansible.builtin.shell:
    cmd: "{{ miniconda_path }}/bin/conda create -n publicdb_venv python={{ publicdb_python_version }} --yes"
    creates: "{{ publicdb_venv }}"

- name: Install conda packages in conda environment
  ansible.builtin.command:
    cmd: "{{ miniconda_path }}/bin/conda install -n publicdb_venv --channel conda-forge --file {{ publicdb_path }}/conda.list --yes"
  register: conda_result
  changed_when: "'Executing transaction' in conda_result.stdout"

- name: Install packages in conda environment using pip
  ansible.builtin.pip:
    requirements: "{{ publicdb_path }}/pip.list"
    executable: "{{ publicdb_venv }}/bin/pip"

- name: Setup the publicdb database in PostgreSQL
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ psql_database_name }}"
    encoding: UTF-8
    state: present
  vars:
    ansible_python_interpreter: "{{ publicdb_venv }}/bin/python"

- name: Add hisparc user to the publicdb database
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    db: "{{ psql_database_name }}"
    name: "{{ ansible_user }}"
    priv: ALL
  vars:
    ansible_python_interpreter: "{{ publicdb_venv }}/bin/python"

- name: Ensure hisparc user has no unnecessary privileges
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ ansible_user }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
  vars:
    ansible_python_interpreter: "{{ publicdb_venv }}/bin/python"

- name: Copy Django settings file
  ansible.builtin.template:
    src: settings.py
    dest: "{{ publicdb_code }}/publicdb/settings.py"
    backup: yes
  notify: Restart uWSGI

- name: Migrate Django apps
  community.general.django_manage:
    command: migrate
    app_path: "{{ publicdb_code }}"
  environment:
    PATH: "{{ publicdb_venv }}/bin:{{ ansible_env.PATH }}"

- name: Collect static files of Django apps
  community.general.django_manage:
    command: collectstatic
    app_path: "{{ publicdb_code }}"
  environment:
    PATH: "{{ publicdb_venv }}/bin:{{ ansible_env.PATH }}"

- name: Ensure supervisord directory exists
  ansible.builtin.file:
    path: "{{ supervisord_path }}"
    state: directory
    mode: 02775

- name: Copy supervisord configuration
  ansible.builtin.template:
    src: supervisord.conf
    dest: "{{ supervisord_path }}/supervisord.conf"
  notify: Restart supervisord

- name: Enable cron job for starting supervisord at boot time
  ansible.builtin.cron:
    name: Start supervisord at boot time
    special_time: reboot
    state: present
    job: "{{ publicdb_venv }}/bin/supervisord -c {{ supervisord_path }}/supervisord.conf"

- name: Check if supervisord is running
  ansible.builtin.command:
    cmd: pgrep supervisord
  register: supervisord
  failed_when: False
  changed_when: supervisord.rc == 1

- name: Start supervisord
  ansible.builtin.command:
    cmd: "{{ publicdb_venv }}/bin/supervisord -c {{ supervisord_path }}/supervisord.conf"
  when: supervisord is changed

- name: Copy uwsgi.ini
  ansible.builtin.template:
    src: uwsgi.ini
    dest: "{{ supervisord_path }}/uwsgi.ini"
    backup: yes
  notify: Restart uWSGI

- name: Copy Apache httpd config file
  ansible.builtin.template:
    src: hisparc-httpd.conf
    dest: /tmp/hisparc-httpd.conf
  register: httpdconf

- name: Sudoedit Apache httpd config file
  ansible.builtin.shell:
    cmd: "sudo sudoedit /etc/httpd/conf.d/hisparc-httpd.conf"
    stdin: ":1,$d|:r /tmp/hisparc-httpd.conf|:wq"
  environment:
    SUDO_EDITOR: /usr/bin/vi
  when: httpdconf.changed
  notify: Restart webserver

- name: Enable cron job for updating histograms and ESD
  ansible.builtin.cron:
    name: "HiSPARC update"
    minute: 0
    hour: 4
    state: present
    job: "{{ publicdb_venv }}/bin/python {{ publicdb_code }}/manage.py updatehistograms"

- name: Enable cron job for cleaning out downloaded raw_data files
  ansible.builtin.cron:
    name: "clean downloaded data"
    special_time: daily
    state: present
    job: "find {{ publicdb_media }}/raw_data/ -name 'tmp*.h5' -mtime +1 -delete"

- name: Enable cron job for creating analysis sessions
  ansible.builtin.cron:
    name: "create confirmed sessions"
    minute: "*/2"
    # For now, disable. Re-enable when everything works and analysis sessions are planned.
    state: absent
    job: "{{ publicdb_venv }}/bin/python {{ publicdb_code }}manage.py createsessions"

- name: Enable cron job for daily backup of publicdb database
  ansible.builtin.cron:
    name: "Publicdb dump"
    minute: 0
    hour: 1
    state: present
    job: "if [ -f '{{ publicdb_dumps }}/publicdb_dump.sql' ]; then mv {{ publicdb_dumps }}/publicdb_dump.sql {{ publicdb_dumps }}/publicdb_dump_yesterday.sql; fi; pg_dump --format=c --compress=1 --schema=public --dbname=publicdb --file={{ publicdb_dumps }}/publicdb_dump.sql"

- name: Enable cron job for monthly backup of publicdb database
  ansible.builtin.cron:
    name: "Monthly publicdb dump"
    minute: 0
    hour: 20
    day: 1
    state: present
    job: "if [ -f '{{ publicdb_dumps }}/publicdb_dump_this_month.sql' ]; then mv {{ publicdb_dumps }}/publicdb_dump_this_month.sql {{ publicdb_dumps }}/publicdb_dump_prev_month.sql; fi; pg_dump --format=c --compress=1 --schema=public --dbname=publicdb --file={{ publicdb_dumps }}/publicdb_dump_this_month.sql"
